name: Deploy to Development

on:
  push:
    branches: [ dev ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  WEB_IMAGE_NAME: ${{ github.repository }}-web

jobs:
  # Deploy to Development Environment
  deploy-dev:
    runs-on: ubuntu-latest
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_TOKEN }}
    
    - name: Extract metadata for main image
      id: meta-main
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix=dev-
          type=raw,value=dev-latest
    
    - name: Extract metadata for web image
      id: meta-web
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.WEB_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix=dev-
          type=raw,value=dev-latest
    
    - name: Build and push main Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta-main.outputs.tags }}
        labels: ${{ steps.meta-main.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
    
    - name: Build and push web Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.web
        push: true
        tags: ${{ steps.meta-web.outputs.tags }}
        labels: ${{ steps.meta-web.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
    
    - name: Deploy to Development Server
      run: |
        echo "Deploying to development environment..."
        echo "Main image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dev-latest"
        echo "Web image: ${{ env.REGISTRY }}/${{ env.WEB_IMAGE_NAME }}:dev-latest"
        
        # Here you would typically:
        # 1. SSH into your development server
        # 2. Pull the new images
        # 3. Update docker-compose.yml with new image tags
        # 4. Restart services
        
        # For now, we'll just log the deployment info
        echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Image |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| Main Service | \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dev-latest\` |" >> $GITHUB_STEP_SUMMARY
        echo "| Web Service | \`${{ env.REGISTRY }}/${{ env.WEB_IMAGE_NAME }}:dev-latest\` |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "1. Update your development server with the new images" >> $GITHUB_STEP_SUMMARY
        echo "2. Run \`docker-compose pull && docker-compose up -d\`" >> $GITHUB_STEP_SUMMARY
        echo "3. Verify services are healthy" >> $GITHUB_STEP_SUMMARY
    
    - name: Run Health Checks
      run: |
        echo "Running health checks..."
        # Here you would typically:
        # 1. Wait for services to be ready
        # 2. Test health endpoints
        # 3. Run smoke tests
        
        echo "Health checks completed successfully!"
    
    - name: Notify Deployment Status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Development deployment successful!"
        else
          echo "❌ Development deployment failed!"
        fi
