name: Security Scan

on:
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  WEB_IMAGE_NAME: ${{ github.repository }}-web

jobs:
  # Code Security Scan
  code-security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety semgrep
    
    - name: Run Bandit security scan
      run: |
        bandit -r app/ -f json -o bandit-report.json || true
        bandit -r app/ -ll
    
    - name: Run Safety dependency scan
      run: |
        safety check --json --output safety-report.json || true
        safety check
    
    - name: Run Semgrep security scan
      run: |
        semgrep --config=auto --json --output=semgrep-report.json app/ || true
        semgrep --config=auto app/
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: |
          bandit-report.json
          safety-report.json
          semgrep-report.json
        retention-days: 30

  # Container Security Scan
  container-security:
    runs-on: ubuntu-latest
    needs: [code-security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_TOKEN }}
    
    - name: Build main image for security scan
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:security-scan
        load: true
    
    - name: Build web image for security scan
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.web
        push: false
        tags: ${{ env.REGISTRY }}/${{ env.WEB_IMAGE_NAME }}:security-scan
        load: true
    
    - name: Run Trivy vulnerability scanner for main image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:security-scan
        format: 'sarif'
        output: 'trivy-main-security.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
    
    - name: Run Trivy vulnerability scanner for web image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.WEB_IMAGE_NAME }}:security-scan
        format: 'sarif'
        output: 'trivy-web-security.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-main-security.sarif'
    
    - name: Upload Trivy web scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-web-security.sarif'
    
    - name: Upload security scan artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: container-security-results
        path: |
          trivy-main-security.sarif
          trivy-web-security.sarif
        retention-days: 30

  # License Compliance Check
  license-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install license checking tools
      run: |
        python -m pip install --upgrade pip
        pip install pip-licenses
    
    - name: Check Python package licenses
      run: |
        pip-licenses --format=json --output-file=python-licenses.json
        pip-licenses --format=table
        pip-licenses --format=csv --output-file=python-licenses.csv
    
    - name: Upload license information
      uses: actions/upload-artifact@v4
      with:
        name: license-compliance
        path: |
          python-licenses.json
          python-licenses.csv
        retention-days: 30

  # Security Summary
  security-summary:
    runs-on: ubuntu-latest
    needs: [code-security, container-security, license-check]
    if: always()
    
    steps:
    - name: Security Summary
      run: |
        echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Scan Type | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Code Security | ${{ needs.code-security.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Container Security | ${{ needs.container-security.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| License Compliance | ${{ needs.license-check.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Security Reports" >> $GITHUB_STEP_SUMMARY
        echo "- Code security scan results are available in the artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- Container vulnerability scan results are uploaded to GitHub Security tab" >> $GITHUB_STEP_SUMMARY
        echo "- License compliance information is available in the artifacts" >> $GITHUB_STEP_SUMMARY
