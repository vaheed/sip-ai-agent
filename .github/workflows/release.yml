name: Release Pipeline

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.2.3)'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  WEB_IMAGE_NAME: ${{ github.repository }}-web

jobs:
  # Build and push release images
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract version from tag
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
    
    - name: Extract metadata for main image
      id: meta-main
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=${{ steps.version.outputs.version }}
          type=raw,value=latest
          type=sha,prefix={{branch}}-
    
    - name: Extract metadata for web image
      id: meta-web
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.WEB_IMAGE_NAME }}
        tags: |
          type=raw,value=${{ steps.version.outputs.version }}
          type=raw,value=latest
          type=sha,prefix={{branch}}-
    
    - name: Build and push main Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta-main.outputs.tags }}
        labels: ${{ steps.meta-main.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        build-args: |
          VERSION=${{ steps.version.outputs.version }}
          BUILD_DATE=${{ fromJSON(steps.meta-main.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ github.sha }}
    
    - name: Build and push web Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.web
        push: true
        tags: ${{ steps.meta-web.outputs.tags }}
        labels: ${{ steps.meta-web.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        build-args: |
          VERSION=${{ steps.version.outputs.version }}
          BUILD_DATE=${{ fromJSON(steps.meta-web.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ github.sha }}
    
    - name: Generate SBOM for main image
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
        format: spdx-json
        output-file: sbom-main.json
    
    - name: Generate SBOM for web image
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.REGISTRY }}/${{ env.WEB_IMAGE_NAME }}:${{ steps.version.outputs.version }}
        format: spdx-json
        output-file: sbom-web.json
    
    - name: Upload SBOMs
      uses: actions/upload-artifact@v3
      with:
        name: sboms
        path: |
          sbom-main.json
          sbom-web.json
        retention-days: 90

  # Test release images
  test-release:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: web/package-lock.json
    
    - name: Install frontend dependencies
      working-directory: ./web
      run: npm ci
    
    - name: Install Playwright browsers
      working-directory: ./web
      run: npx playwright install --with-deps
    
    - name: Extract version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
    
    - name: Create test environment file
      run: |
        cat > .env.test << EOF
        SIP_DOMAIN=test.example.com
        SIP_USER=testuser
        SIP_PASS=testpass
        OPENAI_API_KEY=test-key
        AGENT_ID=test-agent
        LOG_LEVEL=INFO
        PYTHONPATH=/app
        PYTHONUNBUFFERED=1
        PYTHONDONTWRITEBYTECODE=1
        EOF
    
    - name: Test release images with Docker Compose
      run: |
        # Create a test docker-compose file using the release images
        cat > docker-compose.release-test.yml << EOF
        version: '3.8'
        services:
          sip-agent:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
            container_name: sip-ai-agent-release-test
            restart: unless-stopped
            volumes:
              - ./logs:/app/logs
            env_file:
              - .env.test
            ports:
              - "8080:8080"
              - "9090:9090"
              - "5060:5060/udp"
              - "16000-16100:16000-16100/udp"
            environment:
              - TZ=UTC
            healthcheck:
              test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8080/healthz', timeout=5)"]
              interval: 30s
              timeout: 10s
              retries: 3
              start_period: 40s
        
          web:
            image: ${{ env.REGISTRY }}/${{ env.WEB_IMAGE_NAME }}:${{ steps.version.outputs.version }}
            container_name: sip-ai-web-release-test
            restart: unless-stopped
            ports:
              - "8081:8080"
            depends_on:
              sip-agent:
                condition: service_healthy
            healthcheck:
              test: ["CMD", "curl", "-f", "http://localhost:8080/healthz"]
              interval: 30s
              timeout: 10s
              retries: 3
              start_period: 40s
        EOF
        
        # Test the release images
        docker-compose -f docker-compose.release-test.yml up -d
        
        # Wait for services to be ready
        timeout 120 bash -c 'until docker-compose -f docker-compose.release-test.yml exec sip-agent curl -f http://localhost:8080/healthz; do sleep 5; done'
        timeout 60 bash -c 'until docker-compose -f docker-compose.release-test.yml exec web curl -f http://localhost:8080/healthz; do sleep 5; done'
        
        # Test health endpoints
        echo "Testing main service health..."
        docker-compose -f docker-compose.release-test.yml exec sip-agent curl -f http://localhost:8080/healthz
        echo "Testing web service health..."
        docker-compose -f docker-compose.release-test.yml exec web curl -f http://localhost:8080/healthz
        
        # Test web UI accessibility
        echo "Testing web UI accessibility..."
        docker-compose -f docker-compose.release-test.yml exec web curl -f http://localhost:8080/ | head -20
    
    - name: Run E2E tests against release images
      working-directory: ./web
      run: |
        # Set the base URL to the web service
        export BASE_URL=http://localhost:8081
        npm run test:e2e
      env:
        CI: true
    
    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: release-e2e-test-results
        path: |
          web/playwright-report/
          web/test-results/
        retention-days: 30
    
    - name: Cleanup
      if: always()
      run: |
        docker-compose -f docker-compose.release-test.yml down -v
        docker system prune -f

  # Security scan release images
  security-scan-release:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Extract version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
    
    - name: Run Trivy vulnerability scanner for main image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
        format: 'sarif'
        output: 'trivy-main-release.sarif'
        severity: 'CRITICAL,HIGH'
    
    - name: Run Trivy vulnerability scanner for web image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.WEB_IMAGE_NAME }}:${{ steps.version.outputs.version }}
        format: 'sarif'
        output: 'trivy-web-release.sarif'
        severity: 'CRITICAL,HIGH'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-main-release.sarif'
    
    - name: Upload Trivy web scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-web-release.sarif'

  # Create GitHub Release
  create-release:
    runs-on: ubuntu-latest
    needs: [build-and-push, test-release, security-scan-release]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Extract version
      id: version
      run: |
        echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "changelog=Initial release" >> $GITHUB_OUTPUT
        fi
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        release_name: Release ${{ steps.version.outputs.version }}
        body: |
          ## What's Changed
          ${{ steps.changelog.outputs.changelog }}
          
          ## Docker Images
          
          ### Main Service
          ```bash
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
          ```
          
          ### Web Service
          ```bash
          docker pull ${{ env.REGISTRY }}/${{ env.WEB_IMAGE_NAME }}:${{ steps.version.outputs.version }}
          ```
          
          ## Quick Start
          
          ### Using Docker Compose (Recommended)
          ```bash
          # Clone the repository
          git clone https://github.com/${{ github.repository }}.git
          cd sip-ai-agent
          
          # Copy and configure environment
          cp env.example .env
          # Edit .env with your configuration
          
          # Run with Docker Compose
          docker-compose -f docker-compose.prod.yml up -d
          ```
          
          ### Using Individual Containers
          ```bash
          # Main service
          docker run -d \
            --name sip-ai-agent \
            -p 8080:8080 \
            -p 5060:5060/udp \
            -p 16000-16100:16000-16100/udp \
            --env-file .env \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
          
          # Web service
          docker run -d \
            --name sip-ai-web \
            -p 8081:8080 \
            --env-file .env \
            ${{ env.REGISTRY }}/${{ env.WEB_IMAGE_NAME }}:${{ steps.version.outputs.version }}
          ```
          
          ## Health Checks
          - Main service: http://localhost:8080/healthz
          - Web service: http://localhost:8081/healthz
          - Metrics: http://localhost:9090/metrics
          
          ## Documentation
          - [README](https://github.com/${{ github.repository }}#readme)
          - [Deployment Guide](https://github.com/${{ github.repository }}/blob/main/DEPLOYMENT.md)
          - [Contributing Guide](https://github.com/${{ github.repository }}/blob/main/CONTRIBUTING.md)
        draft: false
        prerelease: false
