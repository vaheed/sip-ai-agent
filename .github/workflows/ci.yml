name: CI Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  WEB_IMAGE_NAME: ${{ github.repository }}-web

jobs:
  # Backend Tests
  backend-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio pytest-mock bandit safety
    
    - name: Lint with flake8
      run: |
        pip install flake8
        flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Type check with mypy
      run: |
        pip install mypy
        mypy app/ --ignore-missing-imports --no-error-summary
    
    - name: Security check with bandit
      run: |
        bandit -r app/ -f json -o bandit-report.json || true
        bandit -r app/ -ll
    
    - name: Dependency security check
      run: |
        safety check --json --output safety-report.json || true
        safety check
    
    - name: Test with pytest
      run: |
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=html --junitxml=pytest-report.xml
      env:
        SIP_DOMAIN: test.example.com
        SIP_USER: testuser
        SIP_PASS: testpass
        OPENAI_API_KEY: test-key
        AGENT_ID: test-agent
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: backend-test-results-${{ matrix.python-version }}
        path: |
          pytest-report.xml
          bandit-report.json
          safety-report.json
          htmlcov/

  # Frontend Tests
  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: web/package-lock.json
    
    - name: Install frontend dependencies
      working-directory: ./web
      run: npm ci
    
    - name: Lint frontend code
      working-directory: ./web
      run: npm run lint || echo "Linting failed but continuing"
    
    - name: Type check frontend code
      working-directory: ./web
      run: npm run type-check || echo "Type checking failed but continuing"
    
    - name: Run Playwright E2E tests
      working-directory: ./web
      run: |
        npx playwright install --with-deps
        npm run test:e2e
      env:
        CI: true
    
    - name: Upload Playwright report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: web/playwright-report/
        retention-days: 30
    
    - name: Upload Playwright traces
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-traces
        path: web/test-results/
        retention-days: 30

  # Docker Build and Test
  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata for main image
      id: meta-main
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Extract metadata for web image
      id: meta-web
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.WEB_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push main Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta-main.outputs.tags }}
        labels: ${{ steps.meta-main.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
    
    - name: Build and push web Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.web
        push: true
        tags: ${{ steps.meta-web.outputs.tags }}
        labels: ${{ steps.meta-web.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # Integration Tests with Docker Compose
  integration-tests:
    runs-on: ubuntu-latest
    needs: [docker-build]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Create test environment file
      run: |
        cat > .env.test << EOF
        SIP_DOMAIN=test.example.com
        SIP_USER=testuser
        SIP_PASS=testpass
        OPENAI_API_KEY=test-key
        AGENT_ID=test-agent
        LOG_LEVEL=DEBUG
        PYTHONPATH=/app
        PYTHONUNBUFFERED=1
        PYTHONDONTWRITEBYTECODE=1
        EOF
    
    - name: Test Docker Compose setup
      run: |
        # Test that both services can be built and started
        docker-compose -f docker-compose.yml config
        docker-compose -f docker-compose.prod.yml config
        
        # Test main service health
        docker-compose -f docker-compose.yml up -d sip-agent
        sleep 30
        docker-compose -f docker-compose.yml ps
        docker-compose -f docker-compose.yml logs sip-agent
        
        # Test web service health
        docker-compose -f docker-compose.yml up -d web
        sleep 10
        docker-compose -f docker-compose.yml ps
        docker-compose -f docker-compose.yml logs web
        
        # Test health endpoints
        docker-compose -f docker-compose.yml exec sip-agent curl -f http://localhost:8080/healthz || echo "Main service health check failed"
        docker-compose -f docker-compose.yml exec web curl -f http://localhost:8080/healthz || echo "Web service health check failed"
    
    - name: Test production Docker Compose setup
      run: |
        # Test production configuration
        docker-compose -f docker-compose.prod.yml config
        
        # Note: We don't actually run the production setup in CI as it requires
        # the actual Docker images to be published first
    
    - name: Cleanup
      if: always()
      run: |
        docker-compose -f docker-compose.yml down -v
        docker system prune -f

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: [docker-build]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Run Trivy vulnerability scanner for web image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.WEB_IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-web-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Upload Trivy web scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-web-results.sarif'

  # E2E Tests with Web Container
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [docker-build]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: web/package-lock.json
    
    - name: Install frontend dependencies
      working-directory: ./web
      run: npm ci
    
    - name: Install Playwright browsers
      working-directory: ./web
      run: npx playwright install --with-deps
    
    - name: Create test environment file
      run: |
        cat > .env.test << EOF
        SIP_DOMAIN=test.example.com
        SIP_USER=testuser
        SIP_PASS=testpass
        OPENAI_API_KEY=test-key
        AGENT_ID=test-agent
        LOG_LEVEL=DEBUG
        PYTHONPATH=/app
        PYTHONUNBUFFERED=1
        PYTHONDONTWRITEBYTECODE=1
        EOF
    
    - name: Start services with Docker Compose
      run: |
        # Use the built images from the registry
        export IMAGE_TAG=${{ github.sha }}
        docker-compose -f docker-compose.yml up -d
        
        # Wait for services to be ready
        timeout 60 bash -c 'until docker-compose -f docker-compose.yml exec sip-agent curl -f http://localhost:8080/healthz; do sleep 2; done'
        timeout 60 bash -c 'until docker-compose -f docker-compose.yml exec web curl -f http://localhost:8080/healthz; do sleep 2; done'
    
    - name: Run E2E tests against running services
      working-directory: ./web
      run: |
        # Set the base URL to the web service
        export BASE_URL=http://localhost:8080
        npm run test:e2e
      env:
        CI: true
    
    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results
        path: |
          web/playwright-report/
          web/test-results/
        retention-days: 30
    
    - name: Cleanup
      if: always()
      run: |
        docker-compose -f docker-compose.yml down -v
        docker system prune -f

  # Performance Tests
  performance-tests:
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: web/package-lock.json
    
    - name: Install frontend dependencies
      working-directory: ./web
      run: npm ci
    
    - name: Install Playwright browsers
      working-directory: ./web
      run: npx playwright install --with-deps
    
    - name: Create test environment file
      run: |
        cat > .env.test << EOF
        SIP_DOMAIN=test.example.com
        SIP_USER=testuser
        SIP_PASS=testpass
        OPENAI_API_KEY=test-key
        AGENT_ID=test-agent
        LOG_LEVEL=INFO
        PYTHONPATH=/app
        PYTHONUNBUFFERED=1
        PYTHONDONTWRITEBYTECODE=1
        EOF
    
    - name: Start services for performance testing
      run: |
        docker-compose -f docker-compose.yml up -d
        timeout 60 bash -c 'until docker-compose -f docker-compose.yml exec sip-agent curl -f http://localhost:8080/healthz; do sleep 2; done'
        timeout 60 bash -c 'until docker-compose -f docker-compose.yml exec web curl -f http://localhost:8080/healthz; do sleep 2; done'
    
    - name: Run Lighthouse performance tests
      working-directory: ./web
      run: npm run lighthouse
    
    - name: Upload Lighthouse results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: lighthouse-results
        path: web/lighthouse-results/
        retention-days: 30
    
    - name: Cleanup
      if: always()
      run: |
        docker-compose -f docker-compose.yml down -v
        docker system prune -f

  # Summary
  ci-summary:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, docker-build, integration-tests, security-scan, e2e-tests]
    if: always()
    
    steps:
    - name: CI Summary
      run: |
        echo "## CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Backend Tests | ${{ needs.backend-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend Tests | ${{ needs.frontend-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Docker Build | ${{ needs.docker-build.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration Tests | ${{ needs.integration-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Scan | ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| E2E Tests | ${{ needs.e2e-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Docker Images Built" >> $GITHUB_STEP_SUMMARY
        echo "- Main: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- Web: \`${{ env.REGISTRY }}/${{ env.WEB_IMAGE_NAME }}:${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY